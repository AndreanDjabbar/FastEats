This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
BecomeSeller.jsx
Cart.jsx
Home.jsx
Login.jsx
ManageRestaurant.jsx
MenuDetails.jsx
MenuPage.jsx
MyMenu.jsx
MyMenuDetails.jsx
ProfilePage.jsx
Register.jsx

================================================================
Files
================================================================

================
File: BecomeSeller.jsx
================
import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import Sidebar from "../components/Sidebar";
import { jwtDecode } from "jwt-decode";
import { Camera } from "lucide-react";

const BecomeSeller = () => {
  const [restaurantName, setRestaurantName] = useState("");
  const [restaurantAddress, setRestaurantAddress] = useState("");
  const [restaurantImage, setRestaurantImage] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);
  const [errors, setErrors] = useState({});
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decodedToken = jwtDecode(token);
        if (decodedToken.role === "seller") {
          navigate("/manage-restaurant");
        }
      } catch (error) {
        console.error("Invalid token", error);
        localStorage.removeItem("token");
        navigate("/login");
      }
    }
  }, [navigate]);

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) { // 5MB limit
        setErrors(prev => ({
          ...prev,
          image: "Image size should be less than 5MB"
        }));
        return;
      }

      if (!file.type.startsWith('image/')) {
        setErrors(prev => ({
          ...prev,
          image: "Please upload an image file"
        }));
        return;
      }

      setRestaurantImage(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result);
      };
      reader.readAsDataURL(file);
      setErrors(prev => ({ ...prev, image: null }));
    }
  };

  const handleBecomeSeller = async (e) => {
    e.preventDefault();
    setErrors({});
    const token = localStorage.getItem("token");
    if (!token) {
      alert("You must be logged in to become a seller");
      return;
    }

    if (!restaurantImage) {
      setErrors(prev => ({
        ...prev,
        image: "Please upload a restaurant image"
      }));
      return;
    }

    try {
      const decodedToken = jwtDecode(token);
      if (decodedToken.role !== "user") {
        alert("Only users can become sellers");
        return;
      }

      const formData = new FormData();
      console.log(restaurantName, restaurantAddress, restaurantImage);
      formData.append("restaurantName", restaurantName);
      formData.append("restaurantAddress", restaurantAddress);
      formData.append("restaurantImage", restaurantImage);

      formData.forEach((value, key) => {
        console.log(key, value);
      });

    console.log("form Data: ", formData);
      const response = await axios.post(
        "http://localhost:5000/user/become-seller",
        formData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "multipart/form-data",
          },
        }
      );

      alert(
        response.data.message + " ..Please login again" ||
          "Successfully became a seller!"
      );
      localStorage.removeItem("token");
      navigate("/login");
    } catch (error) {
      if (error.response) {
        const { status, data } = error.response;

        if (status === 400) {
          if (data.errors) {
            const validationErrors = Object.values(data.errors)
              .map((msg) => `• ${msg}`)
              .join("\n");
            alert(`Validation Error:\n${validationErrors}`);
          } else if (data.message) {
            alert(`Error: ${data.message}`);
          } else {
            alert("Invalid request. Please check your input.");
          }
        } else if (status === 401) {
          alert("Unauthorized! Please log in again.");
          localStorage.removeItem("token");
          navigate("/login");
        } else {
          alert(
            data.message ||
              "An unexpected error occurred. Please try again later."
          );
        }
      }
      // window.location.reload();
    }
  };

  return (
    <div className="flex ml-64">
      <Sidebar />
      <main
        className="flex-1 p-5 min-h-screen flex items-center justify-center"
        style={{
          backgroundImage: `linear-gradient(rgba(255, 230, 100, 0.6), rgba(255, 230, 100, 0.6)), url('/manageresto.jpg')`,
          backgroundSize: "cover",
          backgroundPosition: "center",
          backgroundRepeat: "no-repeat",
        }}
      >
        <div className="w-full max-w-md p-8 bg-white shadow-lg rounded-lg">
          <h2 className="text-2xl font-semibold text-center mb-6">
            Become a Seller
          </h2>
          <form onSubmit={handleBecomeSeller} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Restaurant Name
              </label>
              <input
                type="text"
                placeholder="Enter your restaurant name"
                value={restaurantName}
                onChange={(e) => setRestaurantName(e.target.value)}
                required
                className="w-full p-3 border rounded-lg focus:outline-none focus:border-0 focus:ring-2 focus:ring-yellow-500"
              />
              {errors.restaurantName && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.restaurantName}
                </p>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Restaurant Address
              </label>
              <input
                type="text"
                placeholder="Enter your restaurant address"
                value={restaurantAddress}
                onChange={(e) => setRestaurantAddress(e.target.value)}
                required
                className="w-full p-3 border rounded-lg focus:outline-none focus:border-0 focus:ring-2 focus:ring-yellow-500"
              />
              {errors.restaurantAddress && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.restaurantAddress}
                </p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Restaurant Image
              </label>
              <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg hover:border-yellow-500 transition-colors">
                <div className="space-y-1 text-center">
                  {imagePreview ? (
                    <div className="relative">
                      <img
                        src={imagePreview}
                        alt="Restaurant preview"
                        className="mx-auto h-32 w-32 object-cover rounded-lg"
                      />
                      <button
                        type="button"
                        onClick={() => {
                          setImagePreview(null);
                          setRestaurantImage(null);
                        }}
                        className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
                      >
                        ×
                      </button>
                    </div>
                  ) : (
                    <>
                      <Camera className="mx-auto h-12 w-12 text-gray-400" />
                      <div className="flex text-sm text-gray-600">
                        <label
                          htmlFor="restaurant-image"
                          className="relative cursor-pointer bg-white rounded-md font-medium text-yellow-600 hover:text-yellow-500 focus-within:outline-none"
                        >
                          <span>Upload a photo</span>
                          <input
                            id="restaurant-image"
                            name="restaurant-image"
                            type="file"
                            accept="image/*"
                            className="sr-only"
                            onChange={handleImageChange}
                          />
                        </label>
                        <p className="pl-1">or drag and drop</p>
                      </div>
                      <p className="text-xs text-gray-500">
                        PNG, JPG, GIF up to 5MB
                      </p>
                    </>
                  )}
                </div>
              </div>
              {errors.image && (
                <p className="text-red-500 text-sm mt-1">{errors.image}</p>
              )}
            </div>

            <button
              type="submit"
              className="w-full p-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition hover:cursor-pointer font-medium"
            >
              Register as Seller
            </button>
          </form>
        </div>
      </main>
    </div>
  );
};

export default BecomeSeller;

================
File: Cart.jsx
================
import React, { useState } from "react";
import Sidebar from "../components/Sidebar";

//background
import bg from "../assets/cart-background.jpg";

//dummy image
import image from "../assets/cart1.png";
import trash from "../assets/trash.png";

const Cart = () => {
  const initialQuantities = Array(5).fill(1); // Initial quantity for each item
  const [quantities, setQuantities] = useState(initialQuantities);
  const [price, setprice] = useState("$2.99");

  const increaseQuantity = (index) => {
    const newQuantities = [...quantities];
    newQuantities[index] += 1;
    setQuantities(newQuantities);
  };

  const decreaseQuantity = (index) => {
    const newQuantities = [...quantities];
    if (newQuantities[index] > 1) {
      newQuantities[index] -= 1;
      setQuantities(newQuantities);
    }
  };

  return (
    <div
      className="flex flex-col md:flex-row items-center justify-center min-h-screen overflow-y-auto"
      style={{
        backgroundImage: `linear-gradient(rgba(255, 230, 100, 0.6), rgba(255, 230, 100, 0.8)), url(${bg})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
      }}
    >
      <Sidebar className="z-50 hidden md:block" />
      <div className="items-center justify-center py-4 px-6 bg-white rounded-md shadow-yellow-500 shadow-2xl md:ml-64 w-full md:w-auto lg:scale-[0.95] lg:my-5 xl:scale-100 xl:my-5">
        <div className="flex justify-between mb-10">
          <h2 className="font-semibold text-slate-700 sm:font-bold sm:text-lg md:text-2xl xl:text-3xl xl:my-5">
            Shopping Cart
          </h2>
          <h3 className="cursor-pointer text-red-500 underline font-medium text-sm flex items-center md:text-lg ">
            Remove all
          </h3>
        </div>

        {/* container cart */}
        {[...Array(5)].map((_, index) => (
          <div key={index} className="flex flex-col sm:flex-row my-10">
            <div className="bg-transparent max-w-30 max-h-40">
              <img
                src={image}
                className="scale-120 sm:scale-120"
                alt="cart item"
              />
            </div>
            <div className="mx-6">
              <h2 className="text-2xl font-bold">Strawberry Dessert</h2>
              <p className="text-gray-600">250ml</p>
            </div>
            <div className="flex justify-center items-center mx-3">
              <button
                onClick={() => decreaseQuantity(index)}
                className="bg-gray-400 text-black px-2 py-1 rounded-full cursor-pointer h-7 w-7 flex items-center justify-center"
              >
                -
              </button>
              <span className="px-2 bg-white text-lg font-semibold min-w-10 flex justify-center">
                {quantities[index]}
              </span>
              <button
                onClick={() => increaseQuantity(index)}
                className="bg-gray-400 text-black px-2 py-1 rounded-full cursor-pointer h-7 w-7 flex items-center justify-center"
              >
                +
              </button>
            </div>
            <div className="pl-10 flex flex-col justify-end">
              <h2 className="font-extrabold text-xl text-right">{price}</h2>
              <div className="flex justify-end items-end mt-10">
                <img
                  src={trash}
                  className="max-h-6 max-w-7.5 cursor-pointer mb-3 sm:scale-120"
                  alt="delete item"
                />
              </div>
            </div>
          </div>
        ))}

        <div className="flex justify-end">
          <hr className="text-gray-600 w-full md:w-3/4"></hr>
        </div>
        <div className="flex justify-end gap-10 m-3">
          <div>
            <h2 className="font-bold text-lg">Sub-total</h2>
            <p className="text-gray-600">
              {quantities.reduce((acc, curr) => acc + curr, 0)} items
            </p>
          </div>
          <div className="font-extrabold text-3xl">
            <h3>
              $
              {(quantities.reduce((acc, curr) => acc + curr, 0) * 2.99).toFixed(
                2
              )}
            </h3>
          </div>
        </div>

        <div className="flex justify-end gap-4">
          <button className="bg-red-500 text-white rounded-2xl w-24 md:w-30 py-1 cursor-pointer lg:text-xl lg:font-semibold">
            Cancel
          </button>
          <button className="bg-green-700 text-white rounded-2xl w-32 md:w-40 py-1 cursor-pointer lg:text-xl lg:font-semibold ">
            Checkout
          </button>
        </div>
      </div>
    </div>
  );
};

export default Cart;

================
File: Home.jsx
================
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import Sidebar from "../components/Sidebar";
import { DotLottieReact } from "@lottiefiles/dotlottie-react";

const Home = () => {
  const [username, setUsername] = useState(null);
  const [restaurants, setRestaurants] = useState([]);
  const [filteredRestaurants, setFilteredRestaurants] = useState([]); // New state for filtered results
  const [searchQuery, setSearchQuery] = useState(""); // Search state
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  const navigate = useNavigate();

  useEffect(() => {
    const fetchUser = async () => {
      const token = localStorage.getItem("token");

      if (!token) {
        setError("No token found. Please log in.");
        setIsLoading(false);
        return;
      }

      try {
        const response = await fetch("http://localhost:5000/user/profile", {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          throw new Error(
            `Failed to fetch user profile. Status: ${response.status}`
          );
        }

        const data = await response.json();
        setUsername(data.user?.name || "Guest");
      } catch (error) {
        console.error("Error fetching user:", error);
        setError(error.message);
      } finally {
        setIsLoading(false);
      }
    };

    const fetchRestaurants = async () => {
      try {
        const token = localStorage.getItem("token");

        if (!token) {
          throw new Error("No token found. Please log in.");
        }

        const response = await fetch(
          "http://localhost:5000/restaurant/restaurants",
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );

        if (!response.ok) {
          throw new Error("Failed to fetch restaurants.");
        }

        const data = await response.json();
        setRestaurants(data.restaurants);
        setFilteredRestaurants(data.restaurants); // Initialize filtered list
      } catch (error) {
        console.error("Error fetching restaurants:", error);
        setError(error.message);
      }
    };

    fetchUser();
    fetchRestaurants();
  }, []);

  // Handle search
  const handleSearch = (event) => {
    const query = event.target.value.toLowerCase();
    setSearchQuery(query);

    const filtered = restaurants.filter((restaurant) =>
      restaurant.restaurant_name.toLowerCase().includes(query)
    );

    setFilteredRestaurants(filtered);
  };

  if (isLoading) {
    return (
      <div className="flex ml-64 bg-yellow-50 min-h-screen">
        <Sidebar />
        <main className="flex-1 p-5 flex items-center justify-center">
          <div className="text-yellow-600 font-semibold text-lg">
            Loading...
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="flex ml-0 md:ml-64 bg-yellow-50 min-h-screen">
      <Sidebar />
      <main className="flex-1 p-5">
        <div className="flex center justify-center mb-10">
          <div className="w-80 h-40">
            <DotLottieReact
              src="https://lottie.host/6d42c3d8-1480-4f75-81d8-fe093ce5650c/KwFjMHFmhK.lottie"
              loop
              autoplay
            />
          </div>
        </div>
        <h1 className="text-3xl font-bold text-yellow-700 mb-4">
          Welcome, {username}! 🍽️
        </h1>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4 shadow-md">
            {error}
          </div>
        )}

        <div className="mb-6">
          <p className="text-gray-800 text-lg font-medium">
            What would you like to eat today?
          </p>
        </div>

        {/* Search Bar */}
        <div className="mb-4 flex items-center justify-center">
          <input
            type="text"
            placeholder="Search restaurants..."
            value={searchQuery}
            onChange={handleSearch}
            className="w-72 p-2 border bg-white border-yellow-400 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-yellow-500"
          />
        </div>

        <section className="mt-8">
          <h2 className="text-xl font-bold text-yellow-800 mb-4">
            🍕 Available Restaurants
          </h2>
          {filteredRestaurants.length > 0 ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
              {filteredRestaurants.map((restaurant) => (
                <div
                  key={restaurant.restaurant_id}
                  className="w-full border border-yellow-300 rounded-lg bg-white shadow-lg hover:shadow-xl hover:bg-yellow-100 transition-all cursor-pointer"
                  onClick={() =>
                    navigate(`/restaurant/${restaurant.restaurant_id}/menu`)
                  }
                >
                  <div className="h-48 w-full bg-yellow-200 rounded-t-lg flex items-center justify-center overflow-hidden">
                    {restaurant.restaurant_image ? (
                      <img
                        className="w-full h-full object-cover rounded-t-lg"
                        src={`http://localhost:5000/restaurant/uploads/${restaurant.restaurant_image}`}
                        alt={restaurant.restaurant_name}
                      />
                    ) : (
                      <span className="text-gray-600 text-lg font-semibold">
                        Image
                      </span>
                    )}
                  </div>
                  <div className="p-4">
                    <h3 className="text-lg font-semibold text-gray-900">
                      {restaurant.restaurant_name}
                    </h3>
                    <p className="text-gray-600 mt-1">
                      {restaurant.restaurant_address}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-gray-600 text-center py-8">
              No restaurants match your search. 🍽️
            </div>
          )}
        </section>
      </main>
    </div>
  );
};

export default Home;

================
File: Login.jsx
================
import { useState } from "react";
import axios from "axios";
import { useNavigate, Link } from "react-router-dom";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errors, setErrors] = useState({}); // Store field-specific errors
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    setErrors({}); // Clear previous errors

    try {
      const res = await axios.post("http://localhost:5000/user/login", {
        email,
        password,
      });

      localStorage.setItem("token", res.data.token);
      navigate("/");
    } catch (error) {
      const errMsg = error.response.data.message || "An error occurred";
      console.log(errMsg);
      if (errMsg.includes("email")) {
        setErrors({ email: errMsg });
      } else if (errMsg.includes("password")) {
        setErrors({ password: errMsg });
      } else {
        setErrors({ general: errMsg });
      }
    }
  };

  return (
    <div className="fixed inset-0 w-full h-screen overflow-hidden">
      {/* Background Image */}
      <div
        className="absolute inset-0 w-full h-full bg-gray-900 bg-cover bg-center bg-no-repeat"
        style={{ backgroundImage: "url('/foodbg.jpg')" }}
      >
        {/* Dark Overlay */}
        <div className="absolute inset-0 bg-gray-900/75"></div>
      </div>

      {/* Login Card */}
      <div className="relative z-10 flex items-center justify-center w-full h-full">
        <div className="w-full max-w-md p-8 bg-white shadow-lg rounded-lg">
          <img
            src="/logo_FastEats.png"
            alt="Logo"
            className="w-32 mx-auto mb-4"
          />
          <h2 className="text-2xl font-semibold text-center mb-6">Login</h2>
          <form onSubmit={handleLogin} className="space-y-4">
            <div>
              <input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="w-full p-3 border rounded-lg focus:border-0 focus:outline-none focus:ring-2 focus:ring-yellow-500"
              />
              {errors.email && (
                <p className="text-red-500 text-sm mt-1">{errors.email}</p>
              )}
            </div>
            <div>
              <input
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                className="w-full p-3 border rounded-lg focus:border-0 focus:outline-none focus:ring-2 focus:ring-yellow-500"
              />
              {errors.password && (
                <p className="text-red-500 text-sm mt-1">{errors.password}</p>
              )}
            </div>
            <button
              type="submit"
              className="w-full p-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition hover:cursor-pointer"
            >
              Login
            </button>
          </form>
          {errors.general && (
            <p className="text-red-500 text-sm mt-2 text-center">
              {errors.general}
            </p>
          )}
          <p className="mt-4 text-center">
            Don&apos;t have an account?{" "}
            <Link
              to="/register"
              className="text-yellow-500 underline hover:text-yellow-600"
            >
              Register here
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;

================
File: ManageRestaurant.jsx
================
import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import Sidebar from "../components/Sidebar";
import { jwtDecode } from "jwt-decode";
import { FaUtensils, FaMapMarkerAlt, FaSave, FaImage, FaCamera } from "react-icons/fa";

const ManageRestaurant = () => {
  const [restaurantName, setRestaurantName] = useState("");
  const [restaurantAddress, setRestaurantAddress] = useState("");
  const [initialRestaurantName, setInitialRestaurantName] = useState("");
  const [initialRestaurantAddress, setInitialRestaurantAddress] = useState("");
  const [isChanged, setIsChanged] = useState(false);
  const [imagePreview, setImagePreview] = useState(null);
  const [imageFile, setImageFile] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("token");
    const fetchRestaurantData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/restaurant/restaurant", {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });
        const { restaurant } = response.data;
        if (restaurant) {
          setRestaurantName(restaurant.restaurant_name);
          setRestaurantAddress(restaurant.restaurant_address);
          setInitialRestaurantName(restaurant.restaurant_name);
          setInitialRestaurantAddress(restaurant.restaurant_address);
  
          const imageUrl = restaurant.restaurant_image
            ? `http://localhost:5000/restaurant/uploads/${restaurant.restaurant_image}`
            : null;
          setImagePreview(imageUrl);
        } else {
          alert("Restaurant data not found.");
        }
      } catch (error) {
        console.error(error);
        alert("An error occurred while fetching the restaurant details.");
      }
    };
  
    fetchRestaurantData();
  }, [navigate]);

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        alert("Image size must be less than 5MB");
        return;
      }

      if (!file.type.startsWith("image/")) {
        alert("Please upload an image file");
        return;
      }

      setImageFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result);
      };
      reader.readAsDataURL(file);
      setIsChanged(true);
    }
  };

  useEffect(() => {
    if (
      restaurantName !== initialRestaurantName ||
      restaurantAddress !== initialRestaurantAddress ||
      imageFile
    ) {
      setIsChanged(true);
    } else {
      setIsChanged(false);
    }
  }, [restaurantName, restaurantAddress, initialRestaurantName, initialRestaurantAddress, imageFile]);

  const handleUpdateRestaurant = async (e) => {
    e.preventDefault();
    if (!isChanged) return;

    const token = localStorage.getItem("token");
    if (!token) {
      alert("You must be logged in to update your restaurant");
      return;
    }

    try {
      const formData = new FormData();
      formData.append("restaurantName", restaurantName);
      formData.append("restaurantAddress", restaurantAddress);
      if (imageFile) {
        formData.append("restaurantImage", imageFile);
      }

      const response = await axios.put(
        "http://localhost:5000/restaurant/restaurant",
        formData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "multipart/form-data",
          },
        }
      );
      
      alert(response.data.message || "Successfully updated the restaurant!");
      setInitialRestaurantName(restaurantName);
      setInitialRestaurantAddress(restaurantAddress);
      setImageFile(null);
      setIsChanged(false);
      window.location.reload();
    } catch (error) {
      if (error.response) {
        const { status, data } = error.response;

        if (status === 400) {
          if (data.errors) {
            const validationErrors = Object.values(data.errors)
              .map((msg) => `• ${msg}`)
              .join("\n");
            alert(`Validation Error:\n${validationErrors}`);
          } else if (data.message) {
            alert(`Error: ${data.message}`);
          } else {
            alert("Invalid request. Please check your input.");
          }
        } else if (status === 401) {
          alert("Unauthorized! Please log in again.");
          localStorage.removeItem("token");
          navigate("/login");
        } else {
          alert(
            data.message ||
              "An unexpected error occurred. Please try again later."
          );
        }
      }
    }
  };

  return (
    <div
      className="flex w-screen min-h-screen bg-yellow-100"
      style={{
        backgroundImage: `linear-gradient(rgba(255, 230, 100, 0.6), rgba(255, 230, 100, 0.8)), url('/manageresto.jpg')`,
        backgroundSize: "cover",
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
      }}
    >
      <Sidebar />
      <main className="flex-1 flex justify-center items-center p-5">
        <div className="w-full max-w-xl p-8 bg-white shadow-xl rounded-xl">
          <h2 className="text-3xl font-bold text-center text-yellow-600 mb-6 flex items-center justify-center">
            <FaUtensils className="mr-2" /> Manage Your Restaurant
          </h2>

          {/* Image Section */}
          <div className="mb-8">
            <label className="block text-gray-700 font-medium mb-3">
              Restaurant Image
            </label>
            <div className="relative group">
              <div className="w-full h-64 rounded-lg overflow-hidden bg-gray-100 flex items-center justify-center border-2 border-dashed border-gray-300">
                {imagePreview ? (
                  <>
                  <img
                src={imagePreview}
                alt="Restaurant"
                className="w-full h-full object-contain"
              />
                  <div className="absolute inset-0 bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                    <label className="cursor-pointer bg-white text-gray-800 px-4 py-2 rounded-lg shadow-md hover:bg-gray-100 transition flex items-center">
                      <FaCamera className="mr-2" />
                      Change Image
                      <input
                        type="file"
                        className="hidden"
                        accept="image/*"
                        onChange={handleImageChange}
                      />
                    </label>
                  </div>
                </>
                ) : (
                  <label className="cursor-pointer text-gray-500 flex flex-col items-center">
                    <FaImage className="w-12 h-12 mb-2" />
                    <span>Click to upload image</span>
                    <input
                      type="file"
                      className="hidden"
                      accept="image/*"
                      onChange={handleImageChange}
                    />
                  </label>
                )}
              </div>
              <p className="text-sm text-gray-500 mt-2 text-center">
                Recommended: 1200x800px, Max size: 5MB
              </p>
            </div>
          </div>

          <form onSubmit={handleUpdateRestaurant} className="space-y-5">
            <div>
              <label className="block text-gray-700 font-medium mb-1">
                Restaurant Name
              </label>
              <div className="flex items-center border border-gray-300 rounded-lg shadow-sm focus-within:ring-2 focus-within:ring-yellow-500">
                <FaUtensils className="ml-3 text-gray-500" />
                <input
                  type="text"
                  placeholder="Enter your restaurant name"
                  value={restaurantName}
                  onChange={(e) => setRestaurantName(e.target.value)}
                  required
                  className="w-full p-3 focus:outline-none"
                />
              </div>
            </div>
            <div>
              <label className="block text-gray-700 font-medium mb-1">
                Restaurant Address
              </label>
              <div className="flex items-center border border-gray-300 rounded-lg shadow-sm focus-within:ring-2 focus-within:ring-yellow-500">
                <FaMapMarkerAlt className="ml-3 text-gray-500" />
                <input
                  type="text"
                  placeholder="Enter your restaurant address"
                  value={restaurantAddress}
                  onChange={(e) => setRestaurantAddress(e.target.value)}
                  required
                  className="w-full p-3 focus:outline-none"
                />
              </div>
            </div>
            <button
              type="submit"
              disabled={!isChanged}
              className={`w-full p-3 text-white text-lg font-semibold rounded-lg transition flex items-center justify-center ${
                isChanged
                  ? "bg-yellow-500 hover:bg-yellow-600"
                  : "bg-gray-400 cursor-not-allowed"
              }`}
            >
              <FaSave className="mr-2" /> Update Restaurant
            </button>
          </form>
        </div>

        {/* Floating My Menu Button */}
        <a
          href="../my-menu"
          className="fixed bottom-10 right-10 bg-yellow-500 text-white px-6 py-3 rounded-full shadow-lg text-lg font-semibold hover:bg-yellow-600 transition flex items-center"
        >
          <FaUtensils className="mr-2" /> My Menu
        </a>
      </main>
    </div>
  );
};

export default ManageRestaurant;

================
File: MenuDetails.jsx
================
import { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";

const MenuDetails = () => {
  const { menuId } = useParams();
  const [menu, setMenu] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    console.log("🔍 Received menuId:", menuId);
    const fetchMenuDetails = async () => {
      try {
        const response = await fetch(
          `http://localhost:5000/restaurant/menu-by-id/${menuId}`,
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
              "Content-Type": "application/json",
            },
          }
        );

        if (!response.ok) {
          throw new Error("Failed to fetch menu details");
        }

        const data = await response.json();
        if (!data.menu) {
          throw new Error("Invalid menu data received");
        }
        setMenu(data.menu);
      } catch (error) {
        console.log("Error: ", error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchMenuDetails();
  }, [menuId]);

  if (loading)
    return (
      <div className="text-center p-5 text-lg font-semibold text-gray-700">
        Loading...
      </div>
    );
  if (error)
    return (
      <div className="text-red-500 text-center p-5 text-lg font-semibold">
        {error}
      </div>
    );
  if (!menu)
    return (
      <div className="text-gray-500 text-center p-5 text-lg font-semibold">
        Menu not found.
      </div>
    );

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white shadow-lg rounded-xl">
      <Link
        to={`/restaurant/${menu.restaurant_id}/menu`}
        className="text-yellow-600 hover:text-yellow-700 hover:underline flex items-center mb-4"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          class="size-6"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M12 9.75 14.25 12m0 0 2.25 2.25M14.25 12l2.25-2.25M14.25 12 12 14.25m-2.58 4.92-6.374-6.375a1.125 1.125 0 0 1 0-1.59L9.42 4.83c.21-.211.497-.33.795-.33H19.5a2.25 2.25 0 0 1 2.25 2.25v10.5a2.25 2.25 0 0 1-2.25 2.25h-9.284c-.298 0-.585-.119-.795-.33Z"
          />
        </svg>
      </Link>
      <h1 className="text-4xl font-bold text-gray-900 mb-4">
        {menu.menu_name || "Unnamed Dish"}
      </h1>
      <img
        src={
          menu.menu_image ||
          "https://www.pngall.com/wp-content/uploads/7/Dessert-PNG-Photo.png"
        }
        alt={menu.menu_name || "Menu item"}
        className="w-full h-64 object-cover rounded-lg shadow-md mb-4"
      />
      <p className="text-sm uppercase tracking-wide font-semibold text-gray-600 mb-2">
        {menu.menu_category || "No category"}
      </p>
      <p className="text-2xl font-bold text-yellow-700">
        Rp {menu.menu_price ? menu.menu_price.toLocaleString() : "N/A"}
      </p>
      <p className="mt-3 text-gray-700 leading-relaxed">
        {menu.menu_description || "No description available."}
      </p>
    </div>
  );
};

export default MenuDetails;

================
File: MenuPage.jsx
================
import { useEffect, useState, useRef } from "react";
import { useParams, useNavigate } from "react-router-dom";
import Sidebar from "../components/Sidebar";
import { Link } from "react-router-dom";

const validCategories = ["Food", "Drink", "Dessert", "Others"];

const MenuPage = () => {
  const { restaurantId } = useParams();
  const [menuItems, setMenuItems] = useState([]);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showFilters, setShowFilters] = useState(false);
  const filterRef = useRef(null);

  // Search and filter state
  const [searchQuery, setSearchQuery] = useState("");
  const [filterCategory, setFilterCategory] = useState("");
  const [minPrice, setMinPrice] = useState("");
  const [maxPrice, setMaxPrice] = useState("");

  const navigate = useNavigate();

  // Handle click outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (filterRef.current && !filterRef.current.contains(event.target)) {
        setShowFilters(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const toggleFilters = () => {
    setShowFilters(!showFilters);
  };

  const clearFilters = () => {
    setFilterCategory("");
    setMinPrice("");
    setMaxPrice("");
  };

  useEffect(() => {
    const fetchMenu = async () => {
      try {
        const token = localStorage.getItem("token");

        if (!token) {
          throw new Error("No token found. Please log in.");
        }

        const response = await fetch(
          `http://localhost:5000/restaurant/menu/${restaurantId}`,
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );

        if (!response.ok) {
          throw new Error("Failed to fetch menu.");
        }

        const data = await response.json();
        setMenuItems(data.menus || []);
      } catch (error) {
        console.error("Error fetching menu:", error);
        setError(error.message);
      } finally {
        setIsLoading(false);
      }
    };

    fetchMenu();
  }, [restaurantId]);

  // Handle search input
  const handleSearch = (e) => setSearchQuery(e.target.value);

  // Handle category filter
  const handleCategoryFilter = (e) => setFilterCategory(e.target.value);

  // Handle price range input
  const handleMinPriceChange = (e) => setMinPrice(e.target.value);
  const handleMaxPriceChange = (e) => setMaxPrice(e.target.value);

  // Filter logic
  const filteredMenu = menuItems.filter((item) => {
    const matchesSearch = item.menu_name
      .toLowerCase()
      .includes(searchQuery.toLowerCase());
    const matchesCategory = filterCategory
      ? item.menu_category === filterCategory
      : true;

    const price = parseInt(item.menu_price);
    let matchesPrice = true;
    if (minPrice && price < parseInt(minPrice)) matchesPrice = false;
    if (maxPrice && price > parseInt(maxPrice)) matchesPrice = false;

    return matchesSearch && matchesCategory && matchesPrice;
  });

  // Get number of active filters
  const activeFilterCount = [
    filterCategory ? 1 : 0,
    minPrice || maxPrice ? 1 : 0,
  ].reduce((a, b) => a + b, 0);

  if (isLoading) {
    return <div className="text-center p-5">Loading menu...</div>;
  }

  return (
    <div className="flex ml-0 md:ml-64 bg-white min-h-screen">
      <Sidebar />
      <button
        onClick={() => navigate("/home")}
        className="absolute top-8 right-8 flex items-center justify-center w-12 h-12 bg-white text-yellow-500 text-2xl rounded-full focus:outline-none hover:bg-yellow-500 hover:text-white hover:cursor-pointer transition"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          strokeWidth="1.5"
          stroke="currentColor"
          className="w-6 h-6"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M6 18 18 6M6 6l12 12"
          />
        </svg>
      </button>
      <main className="flex-1 p-5 relative mt-20 ml-10">
        <h1 className="text-3xl font-bold mb-6 text-yellow-600">Menu</h1>
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        {/* Search and Filter Section */}
        <div className="mb-6 flex flex-wrap gap-4 items-center justify-center">
          {/* Search Bar */}
          <div className="relative flex-grow max-w-lg">
            <input
              type="text"
              placeholder="Search menu..."
              value={searchQuery}
              onChange={handleSearch}
              className="w-full p-2 pl-10 border border-yellow-400 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-yellow-500"
            />
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-5 h-5 text-yellow-500"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
                />
              </svg>
            </div>
          </div>

          {/* Filter Button and Dropdown */}
          <div className="relative" ref={filterRef}>
            <button
              onClick={toggleFilters}
              className={`flex items-center gap-2 px-4 py-2 rounded-md border ${
                activeFilterCount > 0
                  ? "bg-yellow-500 text-white border-yellow-600"
                  : "bg-white text-yellow-700 border-yellow-400 hover:bg-yellow-50"
              } transition-colors duration-200 hover:cursor-pointer`}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-5 h-5"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z"
                />
              </svg>
              Filter
              {activeFilterCount > 0 && (
                <span className="inline-flex items-center justify-center w-5 h-5 text-xs font-semibold text-white bg-yellow-600 rounded-full">
                  {activeFilterCount}
                </span>
              )}
            </button>

            {/* Filter Dropdown */}
            {showFilters && (
              <div className="absolute right-0 mt-2 w-64 bg-white rounded-md shadow-lg z-10 border border-yellow-200 overflow-hidden">
                <div className="p-4">
                  <div className="flex justify-between items-center mb-3">
                    <h3 className="text-lg font-medium text-yellow-800">
                      Filters
                    </h3>
                    <button
                      onClick={clearFilters}
                      className="text-sm text-yellow-600 hover:text-yellow-800"
                    >
                      Clear all
                    </button>
                  </div>

                  {/* Category Filter */}
                  <div className="mb-3">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Category
                    </label>
                    <select
                      value={filterCategory}
                      onChange={handleCategoryFilter}
                      className="w-full p-2 border border-yellow-300 rounded-md text-sm focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                    >
                      <option value="">All Categories</option>
                      {validCategories.map((category) => (
                        <option key={category} value={category}>
                          {category}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Price Range Filter */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Price Range
                    </label>
                    <div className="flex gap-2">
                      <input
                        type="number"
                        placeholder="Min"
                        value={minPrice}
                        onChange={handleMinPriceChange}
                        className="w-full p-2 border border-yellow-300 rounded-md text-sm focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                      />
                      <input
                        type="number"
                        placeholder="Max"
                        value={maxPrice}
                        onChange={handleMaxPriceChange}
                        className="w-full p-2 border border-yellow-300 rounded-md text-sm focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Menu Items */}
        {filteredMenu.length > 0 ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
            {filteredMenu.map((item) => (
              <Link key={item.menu_id} to={`/menu-details/${item.menu_id}`}>
                <div
                  className="bg-yellow-100 rounded-xl shadow-md border border-yellow-300 
                           transition-all duration-300 hover:shadow-lg hover:bg-yellow-400 
                           hover:border-yellow-800 cursor-pointer overflow-hidden"
                >
                  <img
                    src={
                      item.menu_image
                        ? item.menu_image
                        : "https://www.pngall.com/wp-content/uploads/7/Dessert-PNG-Photo.png"
                    }
                    alt={item.menu_name}
                    className="w-full h-50 object-cover rounded-t-xl"
                  />
                  <div className="p-5">
                    <h3 className="text-xl font-bold text-yellow-800 group-hover:text-white">
                      {item.menu_name}
                    </h3>
                    <p className="text-sm text-gray-500 italic group-hover:text-white">
                      {item.menu_category}
                    </p>
                    <p className="text-gray-700 mt-2 group-hover:text-white">
                      Rp {item.menu_price}
                    </p>
                  </div>
                </div>
              </Link>
            ))}
          </div>
        ) : (
          <div className="text-gray-500 text-center py-8">
            {searchQuery || filterCategory || minPrice || maxPrice
              ? "No menu items match your search criteria."
              : "No menu available."}
          </div>
        )}
      </main>
    </div>
  );
};

export default MenuPage;

================
File: MyMenu.jsx
================
import { useEffect, useState, useRef } from "react";
import { useParams, useNavigate } from "react-router-dom";
import Sidebar from "../components/Sidebar";

//icon
import foodIcon from "../assets/foods-icon.png";
import drinkIcon from "../assets/drinks-icon.png";
import dessertIcon from "../assets/dessert-icon.png";
import otherIcon from "../assets/other-icon.png";
import axios from "axios";

const validCategories = ["Food", "Drink", "Dessert", "Others"];

const MyMenuPage = () => {
  const { restaurantId } = useParams();
  const [menuItems, setMenuItems] = useState([]);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showCreateMenuForm, setShowCreateMenuForm] = useState(false);
  const [showFilters, setShowFilters] = useState(false);
  const filterRef = useRef(null);

  // Form state
  const [menuName, setMenuName] = useState("");
  const [menuDesc, setMenuDesc] = useState("");
  const [menuCategory, setMenuCategory] = useState("");
  const [menuPrice, setMenuPrice] = useState("");
  const [menuImage, setMenuImage] = useState(null);
  const [previewImage, setPreviewImage] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState(null);

  // Search and filter state
  const [searchQuery, setSearchQuery] = useState("");
  const [filterCategory, setFilterCategory] = useState("");
  const [minPrice, setMinPrice] = useState("");
  const [maxPrice, setMaxPrice] = useState("");

  const navigate = useNavigate();

  const handleClick = (category) => {
    setSelectedCategory(category);
  };

  // Handle navigation to menu details page
  const handleMenuItemClick = (menuId) => {
    navigate(`/my-menu/${menuId}/details`);
  };

  const toggleFilters = () => {
    setShowFilters(!showFilters);
  };

  const clearFilters = () => {
    setFilterCategory("");
    setMinPrice("");
    setMaxPrice("");
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        alert("Image size must be less than 5MB");
        return;
      }

      if (!file.type.startsWith("image/")) {
        alert("Please upload an image file");
        return;
      }

      setMenuImage(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewImage(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  useEffect(() => {
    const fetchMenu = async () => {
      try {
        const token = localStorage.getItem("token");

        if (!token) {
          throw new Error("No token found. Please log in.");
        }

        const response = await fetch(`http://localhost:5000/restaurant/menus`, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          throw new Error("Failed to fetch menu.");
        }

        const data = await response.json();
        setMenuItems(data.menus || []);
      } catch (error) {
        console.error("Error fetching menu:", error);
        setError(error.message);
      } finally {
        setIsLoading(false);
      }
    };

    fetchMenu();
  }, [restaurantId]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (filterRef.current && !filterRef.current.contains(event.target)) {
        setShowFilters(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Handle search input
  const handleSearch = (e) => setSearchQuery(e.target.value);

  // Handle category filter
  const handleCategoryFilter = (e) => setFilterCategory(e.target.value);

  // Handle price range input
  const handleMinPriceChange = (e) => setMinPrice(e.target.value);
  const handleMaxPriceChange = (e) => setMaxPrice(e.target.value);

  // Filter logic
  const filteredMenu = menuItems.filter((item) => {
    const matchesSearch = item.menu_name
      .toLowerCase()
      .includes(searchQuery.toLowerCase());
    const matchesCategory = filterCategory
      ? item.menu_category === filterCategory
      : true;

    const price = parseInt(item.menu_price);
    let matchesPrice = true;
    if (minPrice && price < parseInt(minPrice)) matchesPrice = false;
    if (maxPrice && price > parseInt(maxPrice)) matchesPrice = false;

    return matchesSearch && matchesCategory && matchesPrice;
  });

  // Get number of active filters
  const activeFilterCount = [
    filterCategory ? 1 : 0,
    minPrice || maxPrice ? 1 : 0,
  ].reduce((a, b) => a + b, 0);

  const handleCreateNewMenu = async (e) => {
    e.preventDefault();

    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("No token found. Please log in.");

      const formData = new FormData();
      formData.append("menuName", menuName);
      formData.append("menuDesc", menuDesc);
      formData.append("menuCategory", selectedCategory);
      formData.append("menuPrice", menuPrice);
      formData.append("restaurantId", restaurantId);
      if (menuImage) {
        formData.append("menuImage", menuImage);
      }

      const response = await axios.post(
        "http://localhost:5000/restaurant/menu",
        formData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "multipart/form-data",
          },
        }
      );

      setMenuItems((prevItems) => [...prevItems, response.data.dataMenu]);
      setShowCreateMenuForm(false);
      setMenuName("");
      setMenuDesc("");
      setMenuPrice("");
      setMenuCategory("");
      setPreviewImage(null);
      setMenuImage(null);
      alert("Menu created successfully");
    } catch (error) {
      console.error(
        "Error creating menu:",
        error.response?.data?.message || error.message
      );
      setError(error.response?.data?.message || "An error occurred");
    }
  };

  if (isLoading) {
    return <div className="text-center p-5">Loading menu...</div>;
  }

  return (
    <div className="flex ml-0 md:ml-64 bg-white min-h-screen">
      <Sidebar />
      <button
        onClick={() => navigate("/manage-restaurant")}
        className="absolute top-8 right-8 flex items-center justify-center w-12 h-12 bg-white text-yellow-500 text-2xl rounded-full focus:outline-none hover:bg-yellow-500 hover:text-white hover:cursor-pointer transition"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          strokeWidth="1.5"
          stroke="currentColor"
          className="w-6 h-6"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M6 18 18 6M6 6l12 12"
          />
        </svg>
      </button>
      <main className="flex-1 p-5 relative mt-20 ml-10">
        <h1 className="text-3xl font-bold mb-6 text-yellow-600">My Menu</h1>
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        {/* Search and Filter Section */}
        <div className="mb-6 flex flex-wrap gap-4 items-center justify-center">
          {/* Search Bar */}
          <div className="relative flex-grow max-w-lg">
            <input
              type="text"
              placeholder="Search menu..."
              value={searchQuery}
              onChange={handleSearch}
              className="w-full p-2 pl-10 border border-yellow-400 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-yellow-500"
            />
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-5 h-5 text-yellow-500"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
                />
              </svg>
            </div>
          </div>

          {/* Filter Button */}
          <div className="relative" ref={filterRef}>
            <button
              onClick={toggleFilters}
              className={`flex items-center gap-2 px-4 py-2 rounded-md border ${
                activeFilterCount > 0
                  ? "bg-yellow-500 text-white border-yellow-600"
                  : "bg-white text-yellow-700 border-yellow-400 hover:bg-yellow-50"
              } transition-colors duration-200 hover:cursor-pointer`}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-5 h-5"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z"
                />
              </svg>
              Filter
              {activeFilterCount > 0 && (
                <span className="inline-flex items-center justify-center w-5 h-5 text-xs font-semibold text-white bg-yellow-600 rounded-full">
                  {activeFilterCount}
                </span>
              )}
            </button>

            {/* Filter Dropdown */}
            {showFilters && (
              <div className="absolute right-0 mt-2 w-64 bg-white rounded-md shadow-lg z-10 border border-yellow-200 overflow-hidden">
                <div className="p-4">
                  <div className="flex justify-between items-center mb-3">
                    <h3 className="text-lg font-medium text-yellow-800">
                      Filters
                    </h3>
                    <button
                      onClick={clearFilters}
                      className="text-sm text-yellow-600 hover:text-yellow-800"
                    >
                      Clear all
                    </button>
                  </div>

                  {/* Category Filter */}
                  <div className="mb-3">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Category
                    </label>
                    <select
                      value={filterCategory}
                      onChange={handleCategoryFilter}
                      className="w-full p-2 border border-yellow-300 rounded-md text-sm focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                    >
                      <option value="">All Categories</option>
                      {validCategories.map((category) => (
                        <option key={category} value={category}>
                          {category}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Price Range Filter */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Price Range
                    </label>
                    <div className="flex gap-2">
                      <input
                        type="number"
                        placeholder="Min"
                        value={minPrice}
                        onChange={handleMinPriceChange}
                        className="w-full p-2 border border-yellow-300 rounded-md text-sm focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                      />
                      <input
                        type="number"
                        placeholder="Max"
                        value={maxPrice}
                        onChange={handleMaxPriceChange}
                        className="w-full p-2 border border-yellow-300 rounded-md text-sm focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {filteredMenu.length > 0 ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
            {filteredMenu.map((item) => (
              <div
                key={item.menu_id}
                className="bg-yellow-100 rounded-xl shadow-md border border-yellow-300 
                         transition-all duration-300 hover:shadow-lg hover:bg-yellow-400 
                         hover:border-yellow-800 cursor-pointer"
                onClick={() => handleMenuItemClick(item.menu_id)}
              >
                <img
                  src={
                    item.menu_image
                      ? `http://localhost:5000/restaurant/uploads/${item.menu_image}`
                      : "https://www.pngall.com/wp-content/uploads/7/Dessert-PNG-Photo.png"
                  }
                  alt={item.menu_name}
                  className="w-full h-50 object-cover rounded-lg mb-4 group-hover:scale-105 transition-transform"
                />
                <div className="p-4">
                  <h3 className="text-xl font-bold text-yellow-800 group-hover:text-white ">
                    {item.menu_name}
                  </h3>
                  <p className="text-sm text-gray-500 italic group-hover:text-white">
                    {item.menu_category}
                  </p>
                  <p className="text-gray-700 mt-2 group-hover:text-white">
                    Rp {item.menu_price}
                  </p>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-gray-500 text-center py-8">
            {searchQuery || filterCategory || minPrice || maxPrice
              ? "No menu items match your search criteria."
              : "No menu available."}
          </div>
        )}

        <button
          onClick={() => setShowCreateMenuForm(true)}
          className="fixed bottom-10 right-10 bg-yellow-500 text-white px-6 py-3 rounded-full shadow-lg hover:bg-yellow-600 transition-transform transform hover:scale-105"
        >
          + Add Menu
        </button>

        {showCreateMenuForm && (
          <div className="flex items-center justify-center backdrop-blur-xs fixed top-0 right-0 bottom-0 left-0 z-50">
            <div className="bg-gradient-to-br from-yellow-300 to-yellow-800 via-yellow-500 py-5 px-8 scale-90 rounded-md relative max-h-screen overflow-y-auto sm:min-w-lg sm:scale-[0.8] lg:min-w-xl lg:scale-95 xl:min-w-3xl">
              <div className="flex items-center justify-center relative">
                <h2 className="font-extrabold text-2xl my-5 -mt-2 text-center text-yellow-900 sm:text-4xl">
                  Create Menu Form
                  <div className="absolute -top-1.5 -right-4">
                    <button
                      onClick={() => setShowCreateMenuForm(false)}
                      className="text-2xl cursor-pointer"
                    >
                      ❌
                    </button>
                  </div>
                </h2>
              </div>
              <div className="border border-yellow-200 p-4 bg-slate-100 rounded-md">
                <form className="text-start" onSubmit={handleCreateNewMenu}>
                  <h2 className="font-bold text-xl">Create New Menu</h2>
                  <hr className="my-2 border-slate-400" />
                  <div className="my-4">
                    <label className="font-semibold text-sm">
                      Upload Image<span className="text-pink-600">*</span>
                    </label>
                    <div className="border border-slate-400 rounded-md border-dashed mt-1 w-full min-h-50 flex flex-col items-center justify-center">
                      <p className="font-semibold text-slate-600 text-center my-2">
                        JPG, PNG, GIF, WEBP, Max 100mb.
                      </p>
                      <input
                        id="file-upload"
                        type="file"
                        accept="image/*"
                        onChange={handleImageChange}
                        className="hidden"
                      />
                      <label
                        htmlFor="file-upload"
                        className="bg-yellow-500 text-white p-2 cursor-pointer hover:bg-yellow-600 rounded-sm font-semibold"
                      >
                        Choose File
                      </label>
                      {previewImage && (
                        <div className="mt-2 flex justify-center w-full">
                          <img
                            src={previewImage}
                            alt="Preview"
                            className="max-w-full max-h-80 object-contain rounded-md"
                            style={{ minWidth: "100%" }}
                          />
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Input Name */}
                  <div className="my-4">
                    <label className="font-semibold text-sm">
                      Name<span className="text-pink-600">*</span>
                    </label>
                    <input
                      type="text"
                      className="input border mt-1 border-slate-400 rounded-md p-2 w-full focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-0"
                      placeholder="Your Menu's Name"
                      value={menuName}
                      onChange={(e) => setMenuName(e.target.value)}
                    />
                  </div>

                  {/* Input Description */}
                  <div className="my-4">
                    <label className="font-semibold text-sm">
                      Description<span className="text-pink-600">*</span>
                    </label>
                    <textarea
                      className="input mt-1 border border-slate-400 rounded-md p-2 w-full h-32 resize-none focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-0"
                      placeholder="Your Menu's Description"
                      value={menuDesc}
                      onChange={(e) => setMenuDesc(e.target.value)}
                    />
                  </div>

                  {/* Input price */}
                  <div className="my-4">
                    <label className="font-semibold text-sm">
                      Price<span className="text-pink-600">*</span>
                    </label>
                    <input
                      type="number"
                      className="input border mt-1 border-slate-400 rounded-md p-2 w-full focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-0"
                      placeholder="Your Menu's Price"
                      value={menuPrice}
                      onChange={(e) => setMenuPrice(e.target.value)}
                    />
                  </div>

                  {/* Menu Category */}
                  <div className="my-4">
                    <label className="font-semibold text-sm">
                      Menu Category<span className="text-pink-600">*</span>
                    </label>
                    <div className="grid grid-cols-2 gap-0 mt-1 md:grid-cols-4">
                      <div
                        className={`border border-yellow-400 rounded-tl-md p-4 text-center cursor-pointer flex flex-col items-center justify-center h-full group transition md:rounded-l ${
                          selectedCategory === "Food"
                            ? "bg-yellow-500"
                            : "hover:bg-yellow-400"
                        }`}
                        onClick={() => handleClick("Food")}
                      >
                        <img
                          src={foodIcon}
                          alt="Foods"
                          className="mb-2 h-10 w-10 object-contain"
                        />
                        Foods
                      </div>

                      {/* Kategori Drinks */}
                      <div
                        className={`border rounded-tr-md border-yellow-400 p-4 text-center cursor-pointer flex flex-col items-center justify-center h-full group transition md:rounded-none ${
                          selectedCategory === "Drink"
                            ? "bg-yellow-500"
                            : "hover:bg-yellow-400"
                        }`}
                        onClick={() => handleClick("Drink")}
                      >
                        <img
                          src={drinkIcon}
                          alt="Drinks"
                          className="mb-2 h-10 w-10 object-contain"
                        />
                        Drinks
                      </div>

                      {/* Kategori Dessert */}
                      <div
                        className={`border rounded-bl-md border-yellow-400 p-4 text-center cursor-pointer flex flex-col items-center justify-center h-full group transition md:rounded-none ${
                          selectedCategory === "Dessert"
                            ? "bg-yellow-500"
                            : "hover:bg-yellow-400"
                        }`}
                        onClick={() => handleClick("Dessert")}
                      >
                        <img
                          src={dessertIcon}
                          alt="Dessert"
                          className="mb-2 h-10 w-10 object-contain"
                        />
                        Dessert
                      </div>

                      {/* Kategori Other */}
                      <div
                        className={`border border-yellow-400 rounded-br-md p-4 text-center cursor-pointer flex flex-col items-center justify-center h-full group transition md:rounded-r ${
                          selectedCategory === "Others"
                            ? "bg-yellow-500"
                            : "hover:bg-yellow-400"
                        }`}
                        onClick={() => handleClick("Others")}
                      >
                        <img
                          src={otherIcon}
                          alt="Other"
                          className="mb-2 h-10 w-10 object-contain"
                        />
                        Other
                      </div>
                    </div>
                  </div>

                  {/* Submit Button */}
                  <div className="mt-10 flex items-center justify-center w-full">
                    <button className="bg-gradient-to-br from-yellow-400 via-yellow-600 to-yellow-800 text-white p-2.5 rounded-xl text-xl font-semibold cursor-pointer w-full">
                      Submit
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default MyMenuPage;

================
File: MyMenuDetails.jsx
================
import { useEffect, useState } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import Sidebar from "../components/Sidebar";

const MyMenuDetails = () => {
  const { menuId } = useParams();
  const [menu, setMenu] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showEditForm, setShowEditForm] = useState(false);
  const [formData, setFormData] = useState({
    menuName: "",
    menuDesc: "",
    menuPrice: "",
    menuCategory: "",
  });
  const [menuImage, setMenuImage] = useState(null);
  const [previewImage, setPreviewImage] = useState(null);

  const navigate = useNavigate();

  useEffect(() => {
    const fetchMenuDetails = async () => {
      try {
        const token = localStorage.getItem("token");

        if (!token) {
          throw new Error("No token found. Please log in.");
        }

        // First try to get the menu by ID
        const response = await fetch(
          `http://localhost:5000/restaurant/menu/${menuId}`,
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to fetch menu details");
        }

        const data = await response.json();
        console.log("Fetched menu data:", data);

        // Handle the case where we get a menus array
        if (data.menus) {
          // Find the specific menu in the array
          const foundMenu = data.menus.find(
            (m) => m.menu_id.toString() === menuId.toString()
          );
          if (!foundMenu) {
            throw new Error(`Menu with ID ${menuId} not found`);
          }
          setMenu(foundMenu);
          setFormData({
            menuName: foundMenu.menu_name || "",
            menuDesc: foundMenu.menu_description || "",
            menuPrice: foundMenu.menu_price || "",
            menuCategory: foundMenu.menu_category || "",
          });
        }
        // Handle the case where we get a single menu object
        else if (data.menu) {
          setMenu(data.menu);
          setFormData({
            menuName: data.menu.menu_name || "",
            menuDesc: data.menu.menu_description || "",
            menuPrice: data.menu.menu_price || "",
            menuCategory: data.menu.menu_category || "",
          });
        } else {
          throw new Error("Invalid response format from server");
        }
      } catch (error) {
        console.error("Error details:", error);
        setError(
          error.message || "An error occurred while fetching menu details"
        );
      } finally {
        setLoading(false);
      }
    };

    fetchMenuDetails();
  }, [menuId]);
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        alert("Image size must be less than 5MB");
        return;
      }

      if (!file.type.startsWith("image/")) {
        alert("Please upload an image file");
        return;
      }

      setMenuImage(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewImage(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleUpdateMenu = async (e) => {
    e.preventDefault();

    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("No token found. Please log in.");

      const formDataObj = new FormData();
      formDataObj.append("menuName", formData.menuName);
      formDataObj.append("menuDesc", formData.menuDesc);
      formDataObj.append("menuCategory", formData.menuCategory);
      formDataObj.append("menuPrice", formData.menuPrice);

      if (menuImage) {
        formDataObj.append("menuImage", menuImage);
      }

      const response = await fetch(
        `http://localhost:5000/restaurant/menu/${menuId}`,
        {
          method: "PUT",
          headers: {
            Authorization: `Bearer ${token}`,
          },
          body: formDataObj,
        }
      );

      if (!response.ok) {
        throw new Error("Failed to update menu");
      }

      const updateData = await response.json();
      setMenu(updateData.menu);
      setShowEditForm(false);
      alert("Menu updated successfully");
    } catch (error) {
      console.error("Error updating menu:", error);
      setError(error.message);
    }
  };

  const handleDeleteMenu = async () => {
    if (!window.confirm("Are you sure you want to delete this menu item?")) {
      return;
    }

    try {
      const token = localStorage.getItem("token");
      if (!token) throw new Error("No token found. Please log in.");

      const response = await fetch(
        `http://localhost:5000/restaurant/menu/${menuId}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        }
      );

      if (!response.ok) {
        throw new Error("Failed to delete menu");
      }

      alert("Menu deleted successfully");
      navigate("/my-menu");
    } catch (error) {
      console.error("Error deleting menu:", error);
      setError(error.message);
    }
  };

  if (loading)
    return (
      <div className="text-center p-5 text-lg font-semibold text-gray-700">
        Loading...
      </div>
    );
  if (error)
    return (
      <div className="text-red-500 text-center p-5 text-lg font-semibold">
        {error}
      </div>
    );
  if (!menu)
    return (
      <div className="text-gray-500 text-center p-5 text-lg font-semibold">
        Menu not found.
      </div>
    );

  return (
    <div className="flex ml-0 md:ml-64 bg-white min-h-screen">
      <Sidebar />
      <main className="flex-1 p-5 relative">
        <div className="max-w-3xl mx-auto p-6 bg-white shadow-lg rounded-xl mt-16">
          <Link
            to="/my-menu"
            className="text-yellow-600 hover:text-yellow-700 hover:underline flex items-center mb-4"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth="1.5"
              stroke="currentColor"
              className="w-6 h-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M12 9.75 14.25 12m0 0 2.25 2.25M14.25 12l2.25-2.25M14.25 12 12 14.25m-2.58 4.92-6.374-6.375a1.125 1.125 0 0 1 0-1.59L9.42 4.83c.21-.211.497-.33.795-.33H19.5a2.25 2.25 0 0 1 2.25 2.25v10.5a2.25 2.25 0 0 1-2.25 2.25h-9.284c-.298 0-.585-.119-.795-.33Z"
              />
            </svg>
            <span className="ml-2">Back to My Menu</span>
          </Link>

          <div className="flex justify-between items-center mb-4">
            <h1 className="text-4xl font-bold text-gray-900">
              {menu.menu_name || "Unnamed Dish"}
            </h1>
            <div className="flex space-x-2">
              <button
                onClick={() => setShowEditForm(true)}
                className="px-4 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 transition-colors"
              >
                Edit
              </button>
              <button
                onClick={handleDeleteMenu}
                className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
              >
                Delete
              </button>
            </div>
          </div>

          <img
            src={
              menu.menu_image
                ? `http://localhost:5000/restaurant/uploads/${menu.menu_image}`
                : "https://www.pngall.com/wp-content/uploads/7/Dessert-PNG-Photo.png"
            }
            alt={menu.menu_name || "Menu item"}
            className="w-full h-64 object-cover rounded-lg shadow-md mb-4"
          />

          <div className="bg-yellow-50 p-4 rounded-md mb-4">
            <p className="text-sm uppercase tracking-wide font-semibold text-yellow-800 mb-2">
              Category: {menu.menu_category || "No category"}
            </p>
            <p className="text-2xl font-bold text-yellow-700">
              Rp {menu.menu_price ? menu.menu_price.toLocaleString() : "N/A"}
            </p>
          </div>

          <div className="mt-4">
            <h2 className="text-xl font-semibold text-gray-800 mb-2">
              Description
            </h2>
            <p className="text-gray-700 leading-relaxed">
              {menu.menu_description || "No description available."}
            </p>
          </div>

          <div className="mt-6 pt-4 border-t border-gray-200">
            <h2 className="text-xl font-semibold text-gray-800 mb-2">
              Menu Stats
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-gray-50 p-3 rounded-md">
                <p className="text-sm text-gray-500">Created</p>
                <p className="font-medium">
                  {new Date(menu.created_at).toLocaleDateString()}
                </p>
              </div>
              <div className="bg-gray-50 p-3 rounded-md">
                <p className="text-sm text-gray-500">Last Updated</p>
                <p className="font-medium">
                  {new Date(menu.updated_at).toLocaleDateString()}
                </p>
              </div>
              <div className="bg-gray-50 p-3 rounded-md">
                <p className="text-sm text-gray-500">Menu ID</p>
                <p className="font-medium">{menu.menu_id}</p>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Edit Form Modal */}
      {showEditForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto p-6">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-bold text-yellow-700">
                Edit Menu Item
              </h2>
              <button
                onClick={() => setShowEditForm(false)}
                className="text-gray-600 hover:text-gray-900"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            </div>

            <form onSubmit={handleUpdateMenu}>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Menu Image
                </label>
                <div className="border-2 border-dashed border-yellow-300 rounded-md p-4 text-center">
                  {previewImage ? (
                    <img
                      src={previewImage}
                      alt="Preview"
                      className="max-h-64 mx-auto mb-2 object-contain"
                    />
                  ) : menu.menu_image ? (
                    <img
                      src={`http://localhost:5000/restaurant/uploads/${menu.menu_image}`}
                      alt={menu.menu_name}
                      className="max-h-64 mx-auto mb-2 object-contain"
                    />
                  ) : (
                    <div className="text-gray-400 mb-2">No image</div>
                  )}
                  <input
                    type="file"
                    id="menuImage"
                    onChange={handleImageChange}
                    accept="image/*"
                    className="hidden"
                  />
                  <label
                    htmlFor="menuImage"
                    className="px-4 py-2 bg-yellow-100 text-yellow-800 rounded cursor-pointer hover:bg-yellow-200"
                  >
                    Choose New Image
                  </label>
                </div>
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Menu Name<span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="menuName"
                  value={formData.menuName}
                  onChange={handleInputChange}
                  required
                  className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                />
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description
                </label>
                <textarea
                  name="menuDesc"
                  value={formData.menuDesc}
                  onChange={handleInputChange}
                  rows="4"
                  className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                ></textarea>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Price (Rp)<span className="text-red-500">*</span>
                  </label>
                  <input
                    type="number"
                    name="menuPrice"
                    value={formData.menuPrice}
                    onChange={handleInputChange}
                    required
                    min="0"
                    className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Category<span className="text-red-500">*</span>
                  </label>
                  <select
                    name="menuCategory"
                    value={formData.menuCategory}
                    onChange={handleInputChange}
                    required
                    className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                  >
                    <option value="">Select a category</option>
                    <option value="Food">Food</option>
                    <option value="Drink">Drink</option>
                    <option value="Dessert">Dessert</option>
                    <option value="Others">Others</option>
                  </select>
                </div>
              </div>

              <div className="flex justify-end space-x-2 mt-6">
                <button
                  type="button"
                  onClick={() => setShowEditForm(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700"
                >
                  Save Changes
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default MyMenuDetails;

================
File: ProfilePage.jsx
================
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { FaUser, FaMapMarkerAlt, FaPhone, FaLock } from "react-icons/fa";

const Profile = () => {
  const [profile, setProfile] = useState({
    name: "",
    profile_photo: "",
    address: "",
    phone_number: "",
  });

  const [originalProfile, setOriginalProfile] = useState({});
  const [preview, setPreview] = useState(null);
  const [changePassword, setChangePassword] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });

  const [isProfileChanged, setIsProfileChanged] = useState(false);
  const [isPasswordChanged, setIsPasswordChanged] = useState(false);

  const navigate = useNavigate();

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const token = localStorage.getItem("token");
        const res = await axios.get("http://localhost:5002/profile", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setProfile(res.data.user);
        setOriginalProfile(res.data.user); // Simpan data asli
        setPreview(res.data.user.profile_photo || null);
      } catch (error) {
        console.error(error);
        alert("Failed to load profile");
      }
    };

    fetchProfile();
  }, []);

  useEffect(() => {
    setIsProfileChanged(
      JSON.stringify(profile) !== JSON.stringify(originalProfile) ||
        preview !== originalProfile.profile_photo
    );
  }, [profile, preview, originalProfile]);

  useEffect(() => {
    setIsPasswordChanged(
      changePassword.currentPassword !== "" ||
        changePassword.newPassword !== "" ||
        changePassword.confirmPassword !== ""
    );
  }, [changePassword]);

  const handleChange = (e) => {
    setProfile({ ...profile, [e.target.name]: e.target.value });
  };

  const handlePasswordChange = (e) => {
    setChangePassword({ ...changePassword, [e.target.name]: e.target.value });
  };

  const handlePhotoChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => setPreview(reader.result);
      reader.readAsDataURL(file);
    }
  };

  const handleSaveProfile = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem("token");
      await axios.put(
        "http://localhost:5002/profile",
        { ...profile, profile_photo: preview },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      alert("Profile updated successfully!");
      setOriginalProfile(profile); // Update state original
      setIsProfileChanged(false);
    } catch (error) {
      console.error(error);
      alert("Update failed");
    }
  };

  const isValidPassword = (password) => {
    return /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/.test(password);
  };

  const handleChangePassword = async (e) => {
    e.preventDefault();

    if (!isValidPassword(changePassword.newPassword)) {
      alert(
        "Password harus minimal 8 karakter dengan kombinasi huruf dan angka!"
      );
      return;
    }

    if (changePassword.newPassword !== changePassword.confirmPassword) {
      alert("New passwords do not match!");
      return;
    }

    try {
      const token = localStorage.getItem("token");
      await axios.put("http://localhost:5002/change-password", changePassword, {
        headers: { Authorization: `Bearer ${token}` },
      });
      alert("Password updated successfully!");
      setChangePassword({
        currentPassword: "",
        newPassword: "",
        confirmPassword: "",
      });
      setIsPasswordChanged(false);
    } catch (error) {
      alert(error.response?.data?.error || "Failed to update password");
    }
  };

  return (
    <div
      className="flex w-screen min-h-screen bg-yellow-200"
      style={{
        backgroundImage: `linear-gradient(rgba(255, 230, 100, 0.6), rgba(255, 230, 100, 0.8)), url('/profilepage.jpg')`,
        backgroundSize: "cover",
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
      }}
    >
      <div className="w-full max-w-md p-8 bg-white shadow-lg rounded-lg mx-auto scale-95 lg:min-w-2xl lg:scale-90 relative">
        <button
          onClick={() => navigate("/home")}
          className="absolute top-4 right-4 flex items-center justify-center w-10 h-10 bg-white text-yellow-500 text-2xl rounded-full focus:outline-none hover:bg-yellow-500 hover:text-white hover:cursor-pointer transition"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth="1.5"
            stroke="currentColor"
            className="w-6 h-6"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M6 18 18 6M6 6l12 12"
            />
          </svg>
        </button>
        <h2 className="mt-10 text-2xl lg:text-4xl font-semibold text-center mb-6">
          Edit Profile
        </h2>

        <div className="flex flex-col items-center mb-4">
          <label htmlFor="photoUpload" className="cursor-pointer">
            <img
              src={
                preview ||
                "https://static-00.iconduck.com/assets.00/avatar-default-icon-2048x2048-h6w375ur.png"
              }
              alt="Profile"
              className="w-24 h-24 object-cover rounded-full mb-4"
            />
          </label>
          <input
            type="file"
            id="photoUpload"
            accept="image/*"
            onChange={handlePhotoChange}
            className="hidden"
          />
        </div>

        <form onSubmit={handleSaveProfile} className="space-y-4">
          <div className="flex items-center border border-gray-300 rounded-lg shadow-sm focus-within:ring-2 focus-within:ring-yellow-500">
            <FaUser className="ml-3 text-gray-500" />
            <input
              type="text"
              name="name"
              placeholder="Name"
              value={profile.name}
              onChange={handleChange}
              required
              className="w-full p-3 focus:outline-none"
            />
          </div>

          <div className="flex items-center border border-gray-300 rounded-lg shadow-sm focus-within:ring-2 focus-within:ring-yellow-500">
            <FaMapMarkerAlt className="ml-3 text-gray-500" />
            <input
              type="text"
              name="address"
              placeholder="Address"
              value={profile.address}
              onChange={handleChange}
              required
              className="w-full p-3 focus:outline-none"
            />
          </div>
          <div className="flex items-center border border-gray-300 rounded-lg shadow-sm focus-within:ring-2 focus-within:ring-yellow-500">
            <FaPhone className="ml-3 text-gray-500" />
            <input
              type="text"
              name="phone_number"
              placeholder="Phone Number"
              value={profile.phone_number}
              onChange={handleChange}
              required
              className="w-full p-3 focus:outline-none"
            />
          </div>
          <button
            type="submit"
            disabled={!isProfileChanged}
            className={`w-full p-3 rounded-lg transition font-semibold lg:font-bold lg:text-xl ${
              isProfileChanged
                ? "bg-yellow-500 text-white hover:bg-yellow-600"
                : "bg-gray-300 text-gray-500 cursor-not-allowed"
            }`}
          >
            Save Profile
          </button>
        </form>

        <h2 className="text-lg font-semibold mt-6">Change Password</h2>
        <form onSubmit={handleChangePassword} className="space-y-3">
          <div className="flex items-center border border-gray-300 rounded-lg shadow-sm focus-within:ring-2 focus-within:ring-yellow-500">
            <FaLock className="ml-3 text-gray-500" />
            <input
              type="password"
              name="currentPassword"
              placeholder="Current Password"
              value={changePassword.currentPassword}
              onChange={handlePasswordChange}
              required
              className="w-full p-3 focus:outline-none"
            />
          </div>

          <input
            type="password"
            name="newPassword"
            placeholder="New Password"
            value={changePassword.newPassword}
            onChange={handlePasswordChange}
            required
            className="w-full p-3 border rounded-lg border-gray-300 focus:outline-none focus:ring-2 focus:ring-yellow-500"
          />
          <input
            type="password"
            name="confirmPassword"
            placeholder="Confirm New Password"
            value={changePassword.confirmPassword}
            onChange={handlePasswordChange}
            required
            className="w-full p-3 border rounded-lg border-gray-300 focus:outline-none focus:ring-2 focus:ring-yellow-500"
          />
          <button
            type="submit"
            disabled={!isPasswordChanged}
            className={`w-full p-3 rounded-lg transition ${
              isPasswordChanged
                ? "bg-red-500 text-white hover:bg-red-600"
                : "bg-gray-300 text-gray-500 cursor-not-allowed"
            }`}
          >
            Change Password
          </button>
        </form>
      </div>
    </div>
  );
};

export default Profile;

================
File: Register.jsx
================
import { useState } from "react";
import axios from "axios";
import { useNavigate, Link } from "react-router-dom";

const Register = () => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errors, setErrors] = useState({});
  const navigate = useNavigate();

  const handleRegister = async (e) => {
    e.preventDefault();
    setErrors({}); // Reset errors before validation

    try {
      await axios.post("http://localhost:5000/user/register", {
        name,
        email,
        password,
      });
      alert("Registration successful! Please login.");
      navigate("/login");
    } catch (error) {
      const errMsg = error.response?.data?.error || "An error occurred";

      if (errMsg.toLowerCase().includes("name")) {
        setErrors((prev) => ({ ...prev, name: errMsg }));
      }
      if (errMsg.toLowerCase().includes("email")) {
        setErrors((prev) => ({ ...prev, email: errMsg }));
      }
      if (errMsg.toLowerCase().includes("password")) {
        setErrors((prev) => ({ ...prev, password: errMsg }));
      }
      if (
        !errMsg.toLowerCase().includes("name") &&
        !errMsg.toLowerCase().includes("email") &&
        !errMsg.toLowerCase().includes("password")
      ) {
        setErrors((prev) => ({ ...prev, general: errMsg }));
      }
    }
  };

  return (
    <div className="fixed inset-0 w-full h-screen overflow-hidden">
      {/* Background Image */}
      <div
        className="absolute inset-0 w-full h-full bg-gray-900 bg-cover bg-center bg-no-repeat"
        style={{ backgroundImage: "url('/foodbg.jpg')" }}
      >
        <div className="absolute inset-0 bg-gray-900/75"></div>
      </div>

      {/* Register Card */}
      <div className="relative z-10 flex items-center justify-center w-full h-full">
        <div className="w-full max-w-md p-8 bg-white shadow-lg rounded-lg">
          <img
            src="/logo_FastEats.png"
            alt="Logo"
            className="w-32 mx-auto mb-4"
          />
          <h2 className="text-2xl font-semibold text-center mb-6">Register</h2>
          <form onSubmit={handleRegister} className="space-y-4">
            <div>
              <input
                type="text"
                placeholder="Name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
                className="w-full p-3 border rounded-lg focus:border-0 focus:outline-none focus:ring-2 focus:ring-yellow-500"
              />
              {errors.name && (
                <p className="text-red-500 text-sm mt-1">{errors.name}</p>
              )}
            </div>
            <div>
              <input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                className="w-full p-3 border rounded-lg focus:border-0 focus:outline-none focus:ring-2 focus:ring-yellow-500"
              />
              {errors.email && (
                <p className="text-red-500 text-sm mt-1">{errors.email}</p>
              )}
            </div>
            <div>
              <input
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                className="w-full p-3 border rounded-lg focus:border-0 focus:outline-none focus:ring-2 focus:ring-yellow-500"
              />
              {errors.password && (
                <p className="text-red-500 text-sm mt-1">{errors.password}</p>
              )}
            </div>
            <button
              type="submit"
              className="w-full p-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition hover:cursor-pointer"
            >
              Register
            </button>
            {errors.general && (
              <p className="text-red-500 text-sm mt-2 text-center">
                {errors.general}
              </p>
            )}
          </form>
          <p className="mt-4 text-center">
            Already have an account?{" "}
            <Link
              to="/login"
              className="text-yellow-500 underline hover:text-yellow-600"
            >
              Login here
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Register;



================================================================
End of Codebase
================================================================
